<?php

use NixPHP\Form\Core\Validator;
use function NixPHP\Form\error;
use function NixPHP\Form\error_class;
use function NixPHP\Form\memory;
use function NixPHP\I18n\t;
use function NixPHP\route;
use function NixPHP\Form\csrf;

/* @var array $data */
/* @var Validator $validator */
?>
<form action="<?= route('index') ?>" method="post" class="width-md mx-auto">

    <div class="flex items-center gap-2">
        <label class="w-25" for="type"><?= t('form.label.type') ?></label>
        <input id="type" type="text" name="types" placeholder="<?= t('form.placeholder.type') ?>" value="<?= memory('types') ?>" class="<?= error_class('types', $validator) ?>">
        <div class="flex">
            <?php foreach ($data['types'] as $type): ?>
                <div class="chip"><?= $type->getName() ?></div>
            <?php endforeach; ?>
        </div>
    </div>
    <?= error('types', $validator); ?>

    <div class="flex items-center gap-2 mt-2">
        <label class="w-25" for="symptoms"><?= t('form.label.symptom') ?></label>
        <input id="symptoms" type="text" name="symptoms" placeholder="<?= t('form.placeholder.symptom') ?>" value="<?= memory('symptoms') ?>" class="<?= error_class('symptoms', $validator) ?>">
        <div class="flex">
            <?php foreach ($data['symptoms'] as $symptom): ?>
                <div class="chip"><?= $symptom->getName() ?></div>
            <?php endforeach; ?>
        </div>
    </div>
    <?= error('symptoms', $validator); ?>

    <div class="flex items-center gap-2 mt-2">
        <label class="w-25" for="triggers"><?= t('form.label.trigger') ?></label>
        <input id="triggers" type="text" name="triggers" placeholder="<?= t('form.placeholder.trigger') ?>" value="<?= memory('triggers') ?>" class="<?= error_class('triggers', $validator) ?>">
        <div class="flex">
            <?php foreach ($data['triggers'] as $trigger): ?>
                <div class="chip"><?= $trigger->getName() ?></div>
            <?php endforeach; ?>
        </div>
    </div>
    <?= error('triggers', $validator); ?>

    <div class="flex items-center gap-2 mt-2">
        <label class="w-25" for="duration"><?= t('form.label.duration') ?></label>
        <input id="duration" type="text" name="duration" placeholder="<?= t('form.placeholder.duration') ?>" value="<?= memory('duration') ?>" class="<?= error_class('duration', $validator) ?>">
        <div class="flex gap-2">
            <span class="btn timer-start bg-green">Start</span>
            <span class="btn timer-stop bg-red hidden">Stop</span>
        </div>
    </div>
    <?= error('duration', $validator); ?>

    <input type="hidden" name="_csrf" value="<?= csrf() ?>" />

    <hr />

    <button class="btn bg-green">Speichern</button>

</form>

<script>

// chip
(() => {

    function formatTime(seconds) {
        const h = String(Math.floor(seconds / 3600)).padStart(2, '0');
        const m = String(Math.floor((seconds % 3600) / 60)).padStart(2, '0');
        const s = String(seconds % 60).padStart(2, '0');
        return `${h}:${m}:${s}`;
    }

    document.addEventListener('DOMContentLoaded', () => {

        const startBtn = document.querySelector('.timer-start');
        const stopBtn = document.querySelector('.timer-stop');
        const field = document.querySelector('#duration');
        let timer = null;
        let elapsedSeconds = 0;

        startBtn.addEventListener('click', function() {

            startBtn.classList.add('hidden');
            stopBtn.classList.remove('hidden');

            timer = setInterval(() => {
                elapsedSeconds++;
                field.value = formatTime(elapsedSeconds);
            }, 1000);
        });

        stopBtn.addEventListener('click', () => {
            startBtn.classList.remove('hidden');
            stopBtn.classList.add('hidden');
            clearInterval(timer);
        });

        document.querySelectorAll('.chip').forEach(chip => {
            chip.addEventListener('click', () => {
                const tag = chip.textContent.trim();
                const parent = chip.closest('.flex.items-center');
                const input = parent.querySelector('input[type="text"]');
                if (!input) return;

                let tags = input.value.split(',').map(t => t.trim()).filter(Boolean);
                if (!tags.includes(tag)) {
                    tags.push(tag);
                    input.value = tags.join(', ');
                    chip.classList.add('hidden');
                }
            });
        });

        document.querySelectorAll('input[type="text"]').forEach(input => {
            input.addEventListener('input', () => {
                const parent = input.closest('.flex.items-center');
                const chips = parent.querySelectorAll('.chip');
                const tags = input.value.split(',').map(t => t.trim()).filter(Boolean);

                // Remove errors while typing
                input.classList.remove('error');

                chips.forEach(chip => {
                    const tag = chip.textContent.trim();
                    chip.classList.toggle('hidden', tags.includes(tag));
                });
            });

            const parent = input.closest('.flex.items-center');
            const chips = parent.querySelectorAll('.chip');
            const tags = input.value.split(',').map(t => t.trim()).filter(Boolean);

            chips.forEach(chip => {
                const tag = chip.textContent.trim();
                chip.classList.toggle('hidden', tags.includes(tag));
            });
        });
    });
})();

</script>